package com.mosioj.ideescadeaux.model.repositories;

import com.mosioj.ideescadeaux.model.entities.Idee;
import com.mosioj.ideescadeaux.model.entities.Priorite;
import com.mosioj.ideescadeaux.model.entities.SousReservationEntity;
import com.mosioj.ideescadeaux.model.entities.User;
import com.mosioj.ideescadeaux.model.repositories.columns.*;
import com.mosioj.ideescadeaux.utils.database.NoRowsException;
import com.mosioj.ideescadeaux.utils.database.PreparedStatementIdKdo;
import com.mosioj.ideescadeaux.utils.database.PreparedStatementIdKdoInserter;
import com.mosioj.ideescadeaux.viewhelper.Escaper;
import org.apache.commons.lang3.StringEscapeUtils;
import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;
import org.springframework.mobile.device.Device;

import java.sql.ResultSet;
import java.sql.SQLException;
import java.text.MessageFormat;
import java.util.ArrayList;
import java.util.List;

import static com.mosioj.ideescadeaux.model.repositories.columns.IdeeColumns.*;

public class Idees extends Table {

    public static final String TABLE_NAME = "IDEES";

    /**
     * Class logger.
     */
    private static final Logger logger = LogManager.getLogger(Idees.class);

    public static final int MOBILE_PICTURE_WIDTH = 42;

    private final Comments comments = new Comments();
    private final Questions questions = new Questions();
    private final GroupIdea groupIdea = new GroupIdea();

    /**
     * Fills the idea structure from a result set query. /!\ The result set must be valid, and have a row available.
     *
     * @param rs The result set generated by the last query execution.
     * @return The new idea.
     */
    private Idee createIdeaFromQuery(ResultSet rs) throws SQLException {
        User bookingOwner = null;
        if (rs.getString(RESERVE.name()) != null) {
            bookingOwner = new User(rs.getInt("userId"),
                                    rs.getString("userName"),
                                    rs.getString(UsersColumns.EMAIL.name()),
                                    rs.getString(UsersColumns.AVATAR.name()));
        }
        User owner = new User(rs.getInt("ownerId"),
                              rs.getString("ownerName"),
                              rs.getString("ownerEmail"),
                              rs.getString("ownerAvatar"));

        User surpriseBy = null;
        if (rs.getString("surpriseName") != null) {
            surpriseBy = new User(rs.getInt("surpriseId"),
                                  rs.getString("surpriseName"),
                                  rs.getString("surpriseEmail"),
                                  rs.getString("surpriseAvatar"));
        }

        Idee idee = new Idee(rs.getInt(ID.name()),
                             owner,
                             rs.getString(IDEE.name()),
                             rs.getString(TYPE.name()),
                             bookingOwner,
                             rs.getString("id_image"),
                             rs.getString(CategoriesColumns.IMAGE.name()),
                             rs.getString(CategoriesColumns.ALT.name()),
                             rs.getString(CategoriesColumns.TITLE.name()),
                             new Priorite(rs.getInt(PRIORITE.name()),
                                          rs.getString("PRIORITY_NAME"),
                                          rs.getString("PRIORITY_PICTURE"),
                                          rs.getInt("PRIORITY_ORDER")),
                             rs.getTimestamp(RESERVE_LE.name()),
                             rs.getTimestamp(MODIFICATION_DATE.name()),
                             rs.getString(A_SOUS_RESERVATION.name()),
                             surpriseBy);

        if (rs.getString(GROUPE_KDO_ID.name()) != null) {
            int groupId = rs.getInt(GROUPE_KDO_ID.name());
            groupIdea.getGroupDetails(groupId).ifPresent(idee::withGroupKDO);
        }
        // FIXME : 0 faire pareil avec les catégories

        return idee;
    }

    /**
     * @return The SQL select/joins to select ideas.
     */
    private StringBuilder getIdeaBasedSelect() {

        CategoriesColumns cNom = CategoriesColumns.NOM;

        StringBuilder columns = new StringBuilder();
        columns.append(MessageFormat.format("select i.{0}, ", ID));
        columns.append(MessageFormat.format("       i.{0}, ", IDEE));
        columns.append(MessageFormat.format("       i.{0}, ", TYPE));
        columns.append(MessageFormat.format("       i.{0}, ", RESERVE));
        columns.append(MessageFormat.format("       i.{0}, ", GROUPE_KDO_ID));
        columns.append(MessageFormat.format("       i.{0} as id_image, ", IMAGE));
        columns.append(MessageFormat.format("       i.{0}, ", PRIORITE));
        columns.append(MessageFormat.format("       p.{0} as PRIORITY_NAME, ", PrioritesColumns.NOM));
        columns.append(MessageFormat.format("       p.{0} as PRIORITY_PICTURE, ", PrioritesColumns.IMAGE));
        columns.append(MessageFormat.format("       p.{0} as PRIORITY_ORDER, ", PrioritesColumns.ORDRE));
        columns.append(MessageFormat.format("       i.{0}, ", RESERVE_LE));
        columns.append(MessageFormat.format("       i.{0}, ", MODIFICATION_DATE));
        columns.append(MessageFormat.format("       i.{0}, ", A_SOUS_RESERVATION));
        columns.append(MessageFormat.format("       c.{0}, ", CategoriesColumns.IMAGE));
        columns.append(MessageFormat.format("       c.{0}, ", CategoriesColumns.ALT));
        columns.append(MessageFormat.format("       c.{0}, ", CategoriesColumns.TITLE));
        columns.append(MessageFormat.format("       u.{0} as userId, ", UsersColumns.ID));
        columns.append(MessageFormat.format("       u.{0} as userName, ", UsersColumns.NAME));
        columns.append(MessageFormat.format("       u.{0}, ", UsersColumns.EMAIL));
        columns.append(MessageFormat.format("       u.{0}, ", UsersColumns.AVATAR));
        columns.append(MessageFormat.format("       u1.{0} as ownerId, ", UsersColumns.ID));
        columns.append(MessageFormat.format("       u1.{0} as ownerName, ", UsersColumns.NAME));
        columns.append(MessageFormat.format("       u1.{0} as ownerEmail, ", UsersColumns.EMAIL));
        columns.append(MessageFormat.format("       u1.{0} as ownerAvatar, ", UsersColumns.AVATAR));
        columns.append(MessageFormat.format("       u2.{0} as surpriseId, ", UsersColumns.ID));
        columns.append(MessageFormat.format("       u2.{0} as surpriseName, ", UsersColumns.NAME));
        columns.append(MessageFormat.format("       u2.{0} as surpriseEmail, ", UsersColumns.EMAIL));
        columns.append(MessageFormat.format("       u2.{0} as surpriseAvatar ", UsersColumns.AVATAR));

        StringBuilder query = new StringBuilder(columns);
        query.append(MessageFormat.format("  from {0} i ", TABLE_NAME));
        query.append(MessageFormat.format("  left join {0} p on i.{1} = p.{2} ",
                                          Priorites.TABLE_NAME,
                                          PRIORITE,
                                          PrioritesColumns.ID));
        query.append(MessageFormat.format("  left join {0} c on i.{1} = c.{2} ", Categories.TABLE_NAME, TYPE, cNom));
        query.append(MessageFormat.format("  left join {0} u on u.id = i.{1} ", Users.TABLE_NAME, RESERVE));
        query.append(MessageFormat.format("  left join {0} u1 on u1.id = i.{1} ", Users.TABLE_NAME, OWNER));
        query.append(MessageFormat.format("  left join {0} u2 on u2.id = i.{1} ", Users.TABLE_NAME, SURPRISE_PAR));

        return query;
    }

    /**
     * Retrieves all ideas of a person.
     *
     * @param ownerId The person for which we are getting all the ideas.
     * @return The person's ideas list.
     */
    public List<Idee> getIdeasOf(int ownerId) throws SQLException {

        List<Idee> ideas = new ArrayList<>();

        StringBuilder query = getIdeaBasedSelect();
        query.append(MessageFormat.format("where i.{0} = ?", OWNER));
        query.append(MessageFormat.format(" order by p.{0} desc,{1}, {2} desc, {3} desc",
                                          PrioritesColumns.ORDRE,
                                          IDEE,
                                          MODIFICATION_DATE,
                                          ID));

        try (PreparedStatementIdKdo ps = new PreparedStatementIdKdo(getDb(), query.toString())) {
            ps.bindParameters(ownerId);
            if (ps.execute()) {
                ResultSet rs = ps.getResultSet();
                while (rs.next()) {
                    ideas.add(createIdeaFromQuery(rs));
                }
            }
        }

        return ideas;
    }

    /**
     * @param thisOne The person.
     * @return All the ideas where this user has a booking, or belongs to a group or a sub part.
     */
    public List<Idee> getIdeasWhereIDoParticipateIn(User thisOne) throws SQLException {

        List<Idee> ideas = new ArrayList<>();

        StringBuilder query = getIdeaBasedSelect();

        // Toutes les sous-réservations
        query.append(MessageFormat.format(" left join {0} s on i.{1} = s.{2} and s.{3} = ? \n",
                                          SousReservation.TABLE_NAME,
                                          ID,
                                          SousReservationColumns.IDEE_ID,
                                          SousReservationColumns.USER_ID));

        // Les groupes
        query.append(MessageFormat.format(" left join {0} g on i.{1} = g.{2} \n",
                                          GroupIdea.TABLE_NAME,
                                          GROUPE_KDO_ID,
                                          GroupIdeaColumns.ID));
        query.append(MessageFormat.format(" left join {0} gc on g.{1} = gc.{2} and gc.{3} = ? \n",
                                          GroupIdea.TABLE_NAME_CONTENT,
                                          GroupIdeaColumns.ID,
                                          GroupIdeaContentColumns.GROUP_ID,
                                          GroupIdeaContentColumns.USER_ID));

        // On sélectionne uniquement les idées
        // - Qu'on a réservé
        // - Qu'on a sous-réservé
        // - Dont on fait parti d'un groupe
        query.append(MessageFormat.format(" where i.{0} = ? or s.{1} is not null or gc.{2} is not null \n",
                                          RESERVE,
                                          SousReservationColumns.ID,
                                          GroupIdeaContentColumns.GROUP_ID));

        String queryText = query.toString();
        logger.trace(MessageFormat.format("{0}, {1}", queryText, thisOne.id));
        long start = System.nanoTime();

        try (PreparedStatementIdKdo ps = new PreparedStatementIdKdo(getDb(), queryText)) {
            ps.bindParameters(thisOne.id, thisOne.id, thisOne.id);
            if (ps.execute()) {
                ResultSet rs = ps.getResultSet();
                while (rs.next()) {
                    ideas.add(createIdeaFromQuery(rs));
                }
            }
        }
        long end = System.nanoTime();
        logger.debug(MessageFormat.format("Query executed in {0} ms for user {1}", (end - start) / 1000000L, thisOne));

        return ideas;
    }

    /**
     * @param idIdee The idea's id.
     * @return All fields for this idea.
     */
    public Idee getIdeaWithoutEnrichment(int idIdee) throws SQLException {

        StringBuilder query = getIdeaBasedSelect();
        query.append(MessageFormat.format("where i.{0} = ?", ID));

        try (PreparedStatementIdKdo ps = new PreparedStatementIdKdo(getDb(), query.toString())) {
            ps.bindParameters(idIdee);
            if (ps.execute()) {
                ResultSet rs = ps.getResultSet();
                if (rs.next()) {
                    return createIdeaFromQuery(rs);
                }
            }
        }

        return null;
    }

    /**
     * @param groupId The booking group's id.
     * @return The idea id of the idea booked by this group.
     */
    public Idee getIdeaWithoutEnrichmentFromGroup(int groupId) throws SQLException {

        StringBuilder query = getIdeaBasedSelect();
        query.append(MessageFormat.format(" where i.{0} = ( ", ID));
        query.append(MessageFormat.format("    select {0} from {1} where {2} = ?", ID, TABLE_NAME, GROUPE_KDO_ID));
        query.append(" ) ");

        try (PreparedStatementIdKdo ps = new PreparedStatementIdKdo(getDb(), query.toString())) {
            ps.bindParameters(groupId);
            if (ps.execute()) {
                ResultSet rs = ps.getResultSet();
                if (rs.next()) {
                    return createIdeaFromQuery(rs);
                }
            }
        }

        return null;
    }

    /**
     * @param groupId The booking group's id.
     * @return The owner of the idea booked by this group, or null if it does not exist.
     */
    public User getIdeaOwnerFromGroup(int groupId) throws SQLException {

        String query = MessageFormat.format("select u.{0}, u.{1}, u.{2}, u.{3} ",
                                            UsersColumns.ID,
                                            UsersColumns.NAME,
                                            UsersColumns.EMAIL,
                                            UsersColumns.AVATAR) +
                       MessageFormat.format("from {0} i ", TABLE_NAME) +
                       MessageFormat.format("inner join {0} u on i.{1} = u.{2} ",
                                            Users.TABLE_NAME,
                                            OWNER,
                                            UsersColumns.ID) +
                       MessageFormat.format(" where i.{0} = ?", GROUPE_KDO_ID);

        try (PreparedStatementIdKdo ps = new PreparedStatementIdKdo(getDb(), query)) {
            ps.bindParameters(groupId);
            if (ps.execute()) {
                ResultSet rs = ps.getResultSet();
                if (rs.next()) {
                    return new User(rs.getInt(UsersColumns.ID.name()),
                                    rs.getString(UsersColumns.NAME.name()),
                                    rs.getString(UsersColumns.EMAIL.name()),
                                    rs.getString(UsersColumns.AVATAR.name()));
                }
            }
        }

        return null;
    }

    /**
     * @param groupId The booking group's id.
     * @param userId  The connected user.
     * @return The list of users that can contribute to this group. They must also belongs to the user relationship.
     */
    public List<User> getPotentialGroupUser(int groupId, int userId) throws SQLException {

        List<User> users = new ArrayList<>();

        StringBuilder query = new StringBuilder();

        query.append("\n");
        query.append(MessageFormat.format("select u.{0}, u.{1}, u.{2}, u.{3} \n",
                                          UsersColumns.ID,
                                          UsersColumns.NAME,
                                          UsersColumns.EMAIL,
                                          UsersColumns.AVATAR));

        // On sélectionne toutes les relations (= second_user) du owner (= first_user) de l'idée...
        query.append(MessageFormat.format("  from {0} ur \n", UserRelations.TABLE_NAME));

        // [ Pour récupérer les infos des users ]
        query.append(MessageFormat.format(" inner join {0} u \n", Users.TABLE_NAME));
        query.append(MessageFormat.format("    on u.{0} = ur.{1} \n",
                                          UsersColumns.ID,
                                          UserRelationsColumns.SECOND_USER));

        // Récupération du owner de l'idée de ce groupe
        query.append(MessageFormat.format(" inner join {0} i \n", TABLE_NAME));
        query.append(MessageFormat.format("    on ur.{0} = i.{1} \n", UserRelationsColumns.FIRST_USER, OWNER));
        query.append(MessageFormat.format("   and i.{0} = ? \n", GROUPE_KDO_ID));

        // On filtre sur les personnes qui sont amis avec l'utilisateur connecté
        query.append(MessageFormat.format(" inner join {0} friends \n", UserRelations.TABLE_NAME));
        query.append(MessageFormat.format("    on friends.{0} = ? \n", UserRelationsColumns.FIRST_USER));
        query.append(MessageFormat.format("   and friends.{0} = ur.{1} \n",
                                          UserRelationsColumns.SECOND_USER,
                                          UserRelationsColumns.SECOND_USER));

        // ... Qui ne sont pas déjà dans le groupe !
        query.append(MessageFormat.format(
                " where not exists (select 1 from {0} g where g.{1} = ? and g.{2} = ur.{3}) \n",
                GroupIdea.TABLE_NAME_CONTENT,
                GroupIdeaContentColumns.GROUP_ID,
                GroupIdeaContentColumns.USER_ID,
                UserRelationsColumns.SECOND_USER));
        query.append(MessageFormat.format("  order by coalesce(u.{0}, {1})", UsersColumns.NAME, UsersColumns.EMAIL));

        logger.trace(query);
        logger.trace(MessageFormat.format("GroupId: {0} / UserId: {1}", groupId, userId));

        try (PreparedStatementIdKdo ps = new PreparedStatementIdKdo(getDb(), query.toString())) {
            ps.bindParameters(groupId, userId, groupId);
            if (ps.execute()) {
                ResultSet rs = ps.getResultSet();
                while (rs.next()) {
                    users.add(new User(rs.getInt(UsersColumns.ID.name()),
                                       rs.getString(UsersColumns.NAME.name()),
                                       rs.getString(UsersColumns.EMAIL.name()),
                                       rs.getString(UsersColumns.AVATAR.name())));
                }
            }
        }

        return users;
    }

    /**
     * @param ideaId The idea's id.
     * @param user   The person.
     * @return True if and only if the user has sub booked the idea.
     */
    public boolean isSubBookBy(int ideaId, User user) throws SQLException {
        return getDb().selectCountStar(MessageFormat.format("select count(*) from {0} where {1} = ? and {2} = ?",
                                                            SousReservation.TABLE_NAME,
                                                            SousReservationColumns.IDEE_ID,
                                                            SousReservationColumns.USER_ID),
                                       ideaId,
                                       user.id) > 0;
    }

    /**
     * Add a new idea in the IDEES table.
     *
     * @param owner       New idea's owner.
     * @param text        New idea's text.
     * @param type        New idea's type.
     * @param priorite    New idea's priority.
     * @param image       New idea's picture.
     * @param surprisePar True if this is a surprise.
     * @param createdBy   New idea's creator (can be different from the owner, especially for surprise).
     */
    public int addIdea(User owner,
                       String text,
                       String type,
                       int priorite,
                       String image,
                       User surprisePar,
                       User createdBy) throws SQLException {

        type = type == null ? "" : type;
        int createdById = createdBy == null ? owner.id : createdBy.id;

        StringBuilder insert = new StringBuilder();
        insert.append("insert into ");
        insert.append(TABLE_NAME);
        insert.append(" (");
        insert.append(OWNER).append(",");
        insert.append(IDEE).append(",");
        insert.append(TYPE).append(",");
        insert.append(IMAGE).append(",");
        insert.append(MODIFICATION_DATE).append(",");
        insert.append(SURPRISE_PAR).append(",");
        insert.append(CREE_LE).append(",");
        insert.append(CREE_PAR).append(",");
        insert.append(PRIORITE);
        insert.append(") values (?, ?, ?, ?, now(), ?, now(), ?, ?)");

        logger.info(MessageFormat.format("Insert query: {0}", insert.toString()));

        try (PreparedStatementIdKdoInserter ps = new PreparedStatementIdKdoInserter(getDb(), insert.toString())) {
            text = StringEscapeUtils.unescapeHtml4(text);
            text = Escaper.escapeIdeaText(text);
            logger.info(MessageFormat.format("Parameters: [{0}, {1}, {2}, {3}, {4}, {5}]",
                                             owner.id,
                                             text,
                                             type,
                                             image,
                                             surprisePar,
                                             priorite));
            ps.bindParameters(owner,
                              text,
                              type,
                              image,
                              surprisePar == null ? null : surprisePar.id,
                              createdById,
                              priorite);

            return ps.executeUpdate();
        }

    }

    /**
     * Book an idea.
     *
     * @param idea   The idea's id.
     * @param userId The person who is booking the idea.
     */
    public void reserver(int idea, int userId) throws SQLException {

        StringBuilder query = new StringBuilder();
        query.append(MessageFormat.format("update {0} ", TABLE_NAME));
        query.append("set reserve = ?, reserve_le = now() ");
        query.append("where id = ? ");

        logger.trace("Query: " + query.toString());
        try (PreparedStatementIdKdo ps = new PreparedStatementIdKdo(getDb(), query.toString())) {
            ps.bindParameters(userId, idea);
            ps.execute();
        }
    }

    /**
     * Ajoute une sous-réservation à cette idée.
     *
     * @param idea The idea's id.
     */
    public void sousReserver(int idea) throws SQLException {

        StringBuilder query = new StringBuilder();
        query.append(MessageFormat.format("update {0} ", TABLE_NAME));
        query.append("set ").append(A_SOUS_RESERVATION).append(" = 'Y', reserve_le = now() ");
        query.append("where id = ? ");

        logger.trace("Query: " + query.toString());
        try (PreparedStatementIdKdo ps = new PreparedStatementIdKdo(getDb(), query.toString())) {
            ps.bindParameters(idea);
            ps.execute();
        }
    }

    /**
     * Book the idea with a group.
     *
     * @param id      The idea's id.
     * @param groupId The booking group's id.
     */
    public void bookByGroup(int id, int groupId) {
        getDb().executeUpdate(MessageFormat.format("update {0} set {1} = ?, {2} = now() where {3} = ?",
                                                   TABLE_NAME,
                                                   GROUPE_KDO_ID,
                                                   RESERVE_LE,
                                                   ID),
                              groupId,
                              id);
    }

    /**
     * Unbook an idea if the booker is the user id.
     *
     * @param idea   The idea's id.
     * @param userId The person who has previously booked the idea.
     */
    public void dereserver(int idea, int userId) throws SQLException {

        StringBuilder query = new StringBuilder();
        query.append(MessageFormat.format("update {0} ", TABLE_NAME));
        query.append("set reserve = null, reserve_le = null ");
        query.append("where id = ? and reserve = ?");

        logger.trace("Query: " + query.toString());
        try (PreparedStatementIdKdo ps = new PreparedStatementIdKdo(getDb(), query.toString())) {
            ps.bindParameters(idea, userId);
            ps.execute();
        }
    }

    /**
     * Supprime la sous réservation de la personne.
     *
     * @param ideaId The idea's id.
     * @param user   The person who has previously booked a subpart of the idea.
     */
    public void dereserverSousPartie(int ideaId, User user) throws SQLException {
        int nb = getDb().executeUpdate(MessageFormat.format("delete from {0} where {1} = ? and {2} = ?",
                                                            SousReservation.TABLE_NAME,
                                                            SousReservationColumns.IDEE_ID,
                                                            SousReservationColumns.USER_ID),
                                       ideaId,
                                       user.id);
        if (nb > 0 && getDb().selectCountStar(MessageFormat.format("select count(*) from {0} where {1} = ?",
                                                                   SousReservation.TABLE_NAME,
                                                                   SousReservationColumns.IDEE_ID),
                                              ideaId) == 0) {
            getDb().executeUpdate(MessageFormat.format("update {0} set {1} = ''N'' where {2} = ?",
                                                       TABLE_NAME,
                                                       A_SOUS_RESERVATION,
                                                       ID),
                                  ideaId);
        }
    }

    /**
     * False if :
     * <ul>
     * <li>The idea belongs to the user</li>
     * <li>The idea is not in the user relationship</li>
     * <li>The idea is already booked (by a group or a person)</li>
     * </ul>
     *
     * @param idea   The idea's id.
     * @param userId The person's id who is trying to book.
     * @return True if and only if the idea can be booked.
     */
    public boolean canBook(int idea, int userId) throws SQLException {

        String queryText = "select count(*) " +
                           "  from {0} i " +
                           " inner join {4} r on (i.{5} = r.{6} and r.{7} = ?) or (i.{5} = r.{7} and r.{6} = ?) " +
                           " where i.id = ? and {1} is null and i.{2} is null and {3} <> ? and {8} = ''N''";

        String query = MessageFormat.format(queryText,
                                            TABLE_NAME,
                                            RESERVE,
                                            GROUPE_KDO_ID,
                                            IdeeColumns.OWNER,
                                            UserRelations.TABLE_NAME,
                                            OWNER,
                                            UserRelationsColumns.FIRST_USER,
                                            UserRelationsColumns.SECOND_USER,
                                            A_SOUS_RESERVATION);
        logger.debug(query);
        return getDb().selectCountStar(query, userId, userId, idea, userId) > 0;
    }

    /**
     * @param idea   The idea's id.
     * @param userId The user id.
     * @return True if and only if a sub part of the idea can be booked.
     */
    public boolean canSubBook(int idea, int userId) throws SQLException {

        String queryText = "select count(*) " +
                           "  from {0} i " +
                           " inner join {4} r on (i.{5} = r.{6} and r.{7} = ?) or (i.{5} = r.{7} and r.{6} = ?) " +
                           " where i.id = ? and {1} is null and i.{2} is null and {3} <> ? " +
                           MessageFormat.format("  and not exists (select 1 from {0} where i.id = {1} and {2} = ?)",
                                                SousReservation.TABLE_NAME,
                                                SousReservationColumns.IDEE_ID,
                                                SousReservationColumns.USER_ID);

        String query = MessageFormat.format(queryText,
                                            TABLE_NAME,
                                            RESERVE,
                                            GROUPE_KDO_ID,
                                            IdeeColumns.OWNER,
                                            UserRelations.TABLE_NAME,
                                            OWNER,
                                            UserRelationsColumns.FIRST_USER,
                                            UserRelationsColumns.SECOND_USER);
        logger.debug(query);
        return getDb().selectCountStar(query, userId, userId, idea, userId, userId) > 0;
    }

    /**
     * Supprime tout type de réservation sur l'idée. Fait aussi le ménage pour les groupes sous-jacent etc.
     *
     * @param idea L'idée qu'on doit déréserver.
     */
    public void toutDereserver(int idea) throws SQLException {

        // Suppression des groupes potentiels
        int groupId;
        try {
            groupId = getDb().selectInt("select " + GROUPE_KDO_ID + " from " + TABLE_NAME + " where " + ID + " = ?",
                                        idea);
            getDb().executeUpdate(MessageFormat.format("delete from {0} where {1} = ?",
                                                       GroupIdea.TABLE_NAME_CONTENT,
                                                       GroupIdeaContentColumns.GROUP_ID),
                                  groupId);
            getDb().executeUpdate(MessageFormat.format("delete from {0} where {1} = ? ",
                                                       GroupIdea.TABLE_NAME,
                                                       GroupIdeaColumns.ID),
                                  groupId);
        } catch (NoRowsException e) {
            // Nothing to do
        }

        // Des sous-reservations
        getDb().executeUpdate(MessageFormat.format("delete from {0} where {1} = ?",
                                                   SousReservation.TABLE_NAME,
                                                   SousReservationColumns.IDEE_ID),
                              idea);

        // Mise a zero des flags
        getDb().executeUpdate(MessageFormat.format(
                "update {0} set {2} = ''N'', {3} = null, {4} = null, {5} = null where {1} = ?",
                TABLE_NAME,
                ID,
                A_SOUS_RESERVATION,
                RESERVE,
                RESERVE_LE,
                GROUPE_KDO_ID),
                              idea);

    }

    /**
     * Drops this idea.
     *
     * @param idea The idea's id.
     */
    public void remove(int idea) throws SQLException {
        try {
            int nb = getDb().executeUpdate(MessageFormat.format("insert into IDEES_HIST select * from {0} where {1} = ?",
                                                                TABLE_NAME,
                                                                ID),
                                           idea);
            if (nb != 1) {
                logger.warn(MessageFormat.format("Strange count of idea history: {0}. Idea was idea n#{1}", nb, idea));
            } else {
                getDb().executeUpdate(MessageFormat.format("update IDEES_HIST set {0} = now() where {1} = ?",
                                                           MODIFICATION_DATE,
                                                           ID),
                                      idea);
            }
        } catch (Exception ignored) {
        }
        toutDereserver(idea);
        getDb().executeUpdate(MessageFormat.format("delete from {0} where {1} = ? ",
                                                   Comments.TABLE_NAME,
                                                   CommentsColumns.IDEA_ID),
                              idea);
        logger.debug(MessageFormat.format("Suppression de l''idée: {0}", idea));
        getDb().executeUpdate(MessageFormat.format("delete from {0} where {1} = ?", TABLE_NAME, ID), idea);
    }

    /**
     * @param userId The user's id.
     * @return True if the user has at least one idea.
     */
    public boolean hasIdeas(int userId) throws SQLException {
        return getDb().doesReturnRows(MessageFormat.format("select 1 from {0} where {1} = ? limit 1",
                                                           TABLE_NAME,
                                                           OWNER), userId);
    }

    /**
     * Touch the idea to say it is up to date.
     *
     * @param ideaId The idea's id.
     */
    public void touch(int ideaId) {
        getDb().executeUpdate(MessageFormat.format("update {0} set {1} = now() where {2} = ?",
                                                   TABLE_NAME,
                                                   MODIFICATION_DATE,
                                                   ID),
                              ideaId);
    }

    /**
     * Modifie les champs suivants d'une idée existante.
     *
     * @param id       The idea's id.
     * @param text     The idea's text.
     * @param type     The idea's type.
     * @param priority The idea's priority.
     * @param image    The idea's picture.
     */
    public void modifier(int id, String text, String type, String priority, String image) {
        text = StringEscapeUtils.unescapeHtml4(text);
        text = Escaper.escapeIdeaText(text);
        getDb().executeUpdate(MessageFormat.format(
                "update {0} set {1} = ?, {2} = ?, {3} = ?, {4} = ?, {5} = now() where {6} = ?",
                TABLE_NAME,
                IDEE,
                TYPE,
                PRIORITE,
                IMAGE,
                MODIFICATION_DATE,
                ID),
                              text,
                              type,
                              priority,
                              image,
                              id);
    }

    /**
     * Purges all idea's (including the history) of a particular user.
     *
     * @param userId The user's id.
     */
    public void removeAll(int userId) {
        getDb().executeUpdate(MessageFormat.format("delete from {0} where {1} = ?", TABLE_NAME, OWNER), userId);
        getDb().executeUpdate(MessageFormat.format("delete from {0} where {1} = ?", "IDEES_HIST", OWNER), userId);
    }

    /**
     * @param ideeId The idee to look.
     * @param userId The person's id.
     * @return True if this user has asked about this idea.
     */
    public boolean hasUserAskedIfUpToDate(int ideeId, int userId) throws SQLException {
        return getDb().doesReturnRows(MessageFormat.format("select 1 from {0} where {1} = ? and {2} = ?",
                                                           IsUpToDateQuestions.TABLE_NAME,
                                                           IsUpToDateColumns.IDEE_ID,
                                                           IsUpToDateColumns.USER_ID),
                                      ideeId,
                                      userId);
    }

    /**
     * @return All images used for ideas.
     */
    public List<String> getAllImages() throws SQLException {

        List<String> res = new ArrayList<>();
        String query = "select IMAGE from " + TABLE_NAME + " where IMAGE is not null and IMAGE <> ''";

        try (PreparedStatementIdKdo ps = new PreparedStatementIdKdo(getDb(), query)) {
            if (ps.execute()) {
                ResultSet rs = ps.getResultSet();
                while (rs.next()) {
                    res.add(rs.getString("IMAGE"));
                }
            }
        }

        return res;
    }

    /**
     * @param user   The connected user.
     * @param idee   The idea.
     * @param device The device (mobile vs computer).
     */
    public void fillAUserIdea(User user, Idee idee, Device device) throws SQLException {

        idee.hasComment = comments.getNbComments(idee.getId()) > 0;
        idee.hasQuestion = questions.getNbQuestions(idee.getId()) > 0;
        idee.hasAskedIfUpToDate = hasUserAskedIfUpToDate(idee.getId(), user.id);

        if (idee.isBooked()) {
            idee.displayClass = "booked_by_others_idea";
            idee.getBookingOwner().ifPresent(o -> {
                // Réservé par soit !
                if (user.equals(o)) {
                    idee.displayClass = "booked_by_me_idea";
                }
            });
            idee.getGroupKDO().ifPresent(g -> {
                if (g.contains(user)) {
                    // On fait parti du groupe
                    idee.displayClass = "booked_by_me_idea";
                } else {
                    idee.displayClass = "shared_booking_idea";
                }
            });
        } else if (idee.isPartiallyBooked()) {
            List<SousReservationEntity> resa = new SousReservation().getSousReservation(idee.getId());
            idee.displayClass = "shared_booking_idea";

            // On fait parti de la sous-réservation
            resa.stream().filter(r -> user.equals(r.getUser())).forEach(r -> idee.displayClass = "booked_by_me_idea");
        }
        // Sinon, on laisse la class par défaut

        if (device.isMobile()) {
            Priorite priorite = idee.getPriorite();
            if (priorite != null && priorite.getImage() != null) {
                priorite.image = priorite.getImage().replaceAll("width=\"[0-9]+px\"",
                                                                "width=\"" + MOBILE_PICTURE_WIDTH + "px\"");
            }
        }
    }
}
